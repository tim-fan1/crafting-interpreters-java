var cache = [];
for (var i = 0; i < 31; i = i + 1) {
  cache = cache + [-1];
}

fun fib(n) {
  if (n == 1 or n == 2) {
    return 1;
  }
  return fib(n - 1) + fib(n - 2);
}

fun fib_memo(n) {
  if (n == 1 or n == 2) {
    return 1;
  }
  if (cache[n] != -1) return cache[n];
  cache[n] = fib_memo(n - 1) + fib_memo(n - 2);
  return cache[n];
}

fun fib_recursive(n) {
  print "Printing fibonacci numbers using O(exp n) strategy.";
  for (var i = 1; i <= n; i = i + 1) {
    print fib(i);
  }
}

fun fib_iterative(n) {
  print "Printing fibonacci numbers using O(n) strategy.";
  for (var i = 1; i <= n; i = i + 1) {
    print fib_memo(i);
  }
}

// Print the first 30 fibonacci numbers.
fun main() {
  fib_recursive(30);
  fib_iterative(30);
  return 0;
}

if (main() != 0) {
  print "An error occurred!";
} else {
  print "Success!";
}

var a = 2;
var dict = {
  a : 4,
  str(a) : 5,
  "a" : 6
};

print dict[a]; // print 4
print dict[str(a)]; // print 5
print dict["a"]; // print 6
// print dict[a + 1]; // error: key not in dictionary.

print "///////";

dict = {
  0 : 101010,
  "144" : 144
};
print dict[0]; // print 101010
print dict["144"]; // print 144
print "######";
print "";
for (var i = 0; i < 10; i = i + 1) {
  dict[i] = str(i);
}
print dict[0]; // print 0
print dict[9]; // print 9
// print dict[144]; // error, 144 is not a valid key.
print dict["144"]; // print 144

print "########";
print "";

///////

var list = []; 
for (var i = 0; i < 10; i = i + 1) { 
  list = list + [i + 1];
}

fun doASpecialFilter(list) {
  var filteredList = filter(
    lambda (x) => { return x > 10; },  // Apply this filter (x > 10),
    map(                               // Onto this list which we will call mappedList,
      lambda (x) => { return x * 2; }, // Which is the result of applying this map (x * 2),
      list                             // Onto each element of the given list.
    )
  );
  return filteredList;
}

list = doASpecialFilter(list);
for (var i = 0; i < len(list); i = i + 1) {
  print list[i];                       // [1,2,3,4,5,6,7,8,9] => [2,4,6,8,10,12,14,16,18] //    map (x * 2)
                                       //                     =>            [12,14,16,18] // filter (x > 10)
}

var sum = reduce(lambda (x, y) => { return x + y; }, list);
print "###";
print sum;
print "#####";

// This works.
var test = [1, "testtt", 3, 4];
for (var i = 0; i < 4; i = i + 1) {
  print(test[i]);
}
print("");
print("#####");
print("");
test[0] = 25025;
test[1] = doASpecialFilter;
test[2] = "hello";
test[3] = lambda () => {
  print "test";
  return 2;
};
for (var i = 0; i < 4; i = i + 1) {
  print test[i];
}
print "---";
print test[3]();

print("");
print("#####");
print("");

var f = lambda (x) => { return x * 2; };

var a = [
  f,
  lambda (x) => { return x * 2; },
  lambda (x, y) => { return x + 2 * y; },
  2048,
  "hello world!"
 ];

for (var i = 0; i < len(a); i = i + 1) {
  print a[i];
}

print f(3.5);

print a[0](3.5);

print a[1](3.5);

print a[2](3.5, 1);
print a[2](1, 3.5);
print a[2](1, 1);

print "=====";

var b = [
  [
    1, 
    lambda () => { return [2]; }, 
    3
  ], 
  4, 
  lambda () => { 
    return [
      5, 
      lambda () => { return 6; },
      7
    ];
  },
  8
];

print b[0][1]()[0]; // prints 2.

print "=====";

print b[2]()[1](); // prints 6.
print b[2]()[2]; // prints 7.
print b[0][2]; // prints 3.